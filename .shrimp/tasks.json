{
  "tasks": [
    {
      "id": "51bab667-3ea0-4f14-ad88-9d92eee68daf",
      "name": "创建核心基础架构",
      "description": "创建tools/和core/目录，实现Tool基类、工具注册机制、配置管理系统。这是整个改造的基础，后续所有工具都依赖于此。",
      "notes": "基类应包含：name、version、description、init()、shutdown()等方法\n注册表应支持动态加载和状态监控\n配置管理应支持环境变量和配置文件",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-10-31T02:25:09.152Z",
      "updatedAt": "2025-10-31T02:29:14.371Z",
      "relatedFiles": [
        {
          "path": "tools/base.py",
          "type": "CREATE",
          "description": "工具基类定义，所有工具的抽象接口",
          "lineStart": 1,
          "lineEnd": 50
        },
        {
          "path": "core/config.py",
          "type": "CREATE",
          "description": "配置管理系统，支持环境变量和配置",
          "lineStart": 1,
          "lineEnd": 50
        },
        {
          "path": "core/registry.py",
          "type": "CREATE",
          "description": "工具注册表，统一管理所有工具",
          "lineStart": 1,
          "lineEnd": 50
        },
        {
          "path": "tools/__init__.py",
          "type": "CREATE",
          "description": "工具模块导出文件",
          "lineStart": 1,
          "lineEnd": 20
        },
        {
          "path": "core/__init__.py",
          "type": "CREATE",
          "description": "核心模块导出文件",
          "lineStart": 1,
          "lineEnd": 20
        }
      ],
      "implementationGuide": "1. 创建tools/base.py定义ToolProtocol抽象基类\n2. 创建core/config.py实现配置管理类\n3. 创建core/registry.py实现工具注册表\n4. 更新tools/__init__.py导出核心类和工具列表\n5. 创建core/__init__.py导出共享组件",
      "verificationCriteria": "所有核心文件创建完成，工具基类可正常实例化，配置系统可正常加载配置，注册表可正常注册和获取工具",
      "summary": "核心基础架构创建完成：成功创建了5个核心文件（tools/base.py, tools/__init__.py, core/config.py, core/registry.py, core/__init__.py），实现了完整的ToolProtocol抽象基类、ConfigManager配置管理系统和ToolRegistry工具注册表。所有组件经过测试验证：工具基类可正常实例化，配置系统可正常加载配置（包括环境变量、配置文件和默认值），注册表可正常注册和获取工具，并支持工具的启动、停止和状态监控。修改了requirements.txt添加PyYAML支持，编写了test_core.py测试脚本验证所有功能。",
      "completedAt": "2025-10-31T02:29:14.366Z"
    },
    {
      "id": "5580c104-89ad-4f9b-ab5d-f4912861c342",
      "name": "迁移飞常准MCP代理为工具模块",
      "description": "将main.py中的TokenManager和MCPProxy功能迁移到tools/variflight.py，保持现有功能完全不变。这验证工具基类的可用性。",
      "notes": "必须确保：API兼容性、功能完全一致、性能无损失\n这是最关键的迁移步骤，需要充分测试",
      "status": "in_progress",
      "dependencies": [
        {
          "taskId": "51bab667-3ea0-4f14-ad88-9d92eee68daf"
        }
      ],
      "createdAt": "2025-10-31T02:25:09.152Z",
      "updatedAt": "2025-10-31T02:35:41.387Z",
      "relatedFiles": [
        {
          "path": "tools/variflight.py",
          "type": "CREATE",
          "description": "飞常准MCP代理工具模块",
          "lineStart": 1,
          "lineEnd": 200
        },
        {
          "path": "main.py",
          "type": "TO_MODIFY",
          "description": "更新主文件使用工具注册表",
          "lineStart": 280,
          "lineEnd": 320
        }
      ],
      "implementationGuide": "1. 在tools/variflight.py中创建VariFlightTool类继承Tool基类\n2. 将main.py中的TokenManager和MCPProxy代码迁移到VariflightTool\n3. 调整代码结构，确保不影响现有功能\n4. 更新main.py中的路由逻辑使用新的工具注册表\n5. 保持所有现有API端点和功能不变",
      "verificationCriteria": "迁移后的功能与原版完全一致，所有API端点正常工作，token轮询和管理机制正常"
    },
    {
      "id": "b711b298-0d0d-46f5-a47d-2f31c05433f9",
      "name": "实现文件管理工具",
      "description": "创建tools/file_manager.py，提供文件管理MCP功能：列出目录、读取文件、写入文件、搜索文件等。这是一个实用的个人工具。",
      "notes": "需要实现路径安全检查，避免访问上级目录\n应支持多种文件编码（UTF-8、GBK等）\n建议限制可访问的根目录路径",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "5580c104-89ad-4f9b-ab5d-f4912861c342"
        }
      ],
      "createdAt": "2025-10-31T02:25:09.152Z",
      "updatedAt": "2025-10-31T02:25:09.152Z",
      "relatedFiles": [
        {
          "path": "tools/file_manager.py",
          "type": "CREATE",
          "description": "文件管理工具模块",
          "lineStart": 1,
          "lineEnd": 150
        }
      ],
      "implementationGuide": "1. 创建FileManagerTool类继承Tool基类\n2. 实现常用方法：list_files、read_file、write_file、search_files\n3. 添加安全检查防止越权访问（路径限制）\n4. 支持文件类型过滤和排序\n5. 添加文件操作日志记录",
      "verificationCriteria": "可以正常列出目录、读取写入文件，具备安全检查，可处理多种编码"
    },
    {
      "id": "819e892c-7296-4092-9fc6-145c4eb3408e",
      "name": "实现笔记工具",
      "description": "创建tools/notes.py，提供个人笔记管理功能：创建笔记、编辑笔记、搜索笔记、标签管理等。基于SQLite实现本地存储。",
      "notes": "数据库设计应考虑：笔记ID、标题、内容、标签数组、创建时间、更新时间\n搜索功能应支持模糊匹配和标签过滤\n应定期清理过期的草稿和删除的笔记",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "b711b298-0d0d-46f5-a47d-2f31c05433f9"
        }
      ],
      "createdAt": "2025-10-31T02:25:09.152Z",
      "updatedAt": "2025-10-31T02:25:09.152Z",
      "relatedFiles": [
        {
          "path": "tools/notes.py",
          "type": "CREATE",
          "description": "笔记管理工具模块",
          "lineStart": 1,
          "lineEnd": 200
        },
        {
          "path": "notes.db",
          "type": "DEPENDENCY",
          "description": "SQLite数据库文件（自动创建）",
          "lineStart": 1,
          "lineEnd": 10
        }
      ],
      "implementationGuide": "1. 创建NotesTool类继承Tool基类\n2. 使用SQLite数据库存储笔记（title、content、tags、created_at、updated_at）\n3. 实现CRUD操作：create_note、update_note、delete_note、list_notes\n4. 添加搜索功能：search_notes_by_keyword、search_notes_by_tag\n5. 添加标签管理：add_tag_to_note、remove_tag_from_note、list_all_tags",
      "verificationCriteria": "可以正常创建、编辑、删除、搜索笔记，支持标签功能，数据持久化正常"
    },
    {
      "id": "7ea78b8a-11cf-49b1-ae83-3ec2e745eae6",
      "name": "实现Web搜索工具",
      "description": "创建tools/web_search.py，提供Web搜索MCP功能：搜索查询、获取搜索结果、提取网页内容等。支持多种搜索引擎。",
      "notes": "应支持多个搜索引擎以提高可靠性\n需要实现请求频率限制避免被封IP\n建议使用异步处理提高并发性能\n网页提取应处理JavaScript渲染的内容",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "b711b298-0d0d-46f5-a47d-2f31c05433f9"
        }
      ],
      "createdAt": "2025-10-31T02:25:09.152Z",
      "updatedAt": "2025-10-31T02:25:09.152Z",
      "relatedFiles": [
        {
          "path": "tools/web_search.py",
          "type": "CREATE",
          "description": "Web搜索工具模块",
          "lineStart": 1,
          "lineEnd": 200
        }
      ],
      "implementationGuide": "1. 创建WebSearchTool类继承Tool基类\n2. 实现搜索功能：支持DuckDuckGo、Bing等搜索引擎\n3. 实现网页内容提取：获取页面标题、摘要、正文\n4. 添加搜索过滤：按时间范围、文件类型过滤\n5. 缓存机制：避免重复搜索相同查询\n6. 错误处理：网络失败、超时等情况的处理",
      "verificationCriteria": "可以正常搜索多个引擎，提取网页内容，支持过滤和缓存，错误处理完善"
    },
    {
      "id": "5270ee55-9cd4-4071-bd75-2e6d16344089",
      "name": "实现任务跟踪器工具",
      "description": "创建tools/task_tracker.py，提供个人任务管理功能：创建任务、更新状态、设置优先级、截止时间、任务分组等。",
      "notes": "状态管理：待办、进行中、已完成、已取消\n优先级：低、中、高、紧急\n支持重复任务和子任务\n应提供任务提醒功能（可选）",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "b711b298-0d0d-46f5-a47d-2f31c05433f9"
        }
      ],
      "createdAt": "2025-10-31T02:25:09.152Z",
      "updatedAt": "2025-10-31T02:25:09.152Z",
      "relatedFiles": [
        {
          "path": "tools/task_tracker.py",
          "type": "CREATE",
          "description": "任务跟踪器工具模块",
          "lineStart": 1,
          "lineEnd": 200
        }
      ],
      "implementationGuide": "1. 创建TaskTrackerTool类继承Tool基类\n2. 设计任务模型：ID、标题、描述、状态、优先级、截止时间、标签、创建时间\n3. 实现任务CRUD：create_task、update_task、delete_task、list_tasks\n4. 添加筛选功能：按状态、优先级、标签、截止时间筛选\n5. 添加统计功能：统计各状态任务数量、完成率等\n6. 支持任务排序：按优先级、截止时间、创建时间排序",
      "verificationCriteria": "可以正常创建、更新、删除任务，支持多种筛选和排序，提供统计信息"
    },
    {
      "id": "3ab138d8-49a7-4d34-bcf9-2fcebb2f8aa9",
      "name": "更新统一管理界面和健康检查",
      "description": "更新main.py和start.py，增加工具管理功能：显示所有工具状态、健康检查、统计信息等。提供更好的监控和管理界面。",
      "notes": "健康检查应包括：数据库连接、文件权限、网络状态等\n统计信息应包括：各工具的使用次数、响应时间、错误率\n工具状态应包括：运行中、停止、错误等",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "5270ee55-9cd4-4071-bd75-2e6d16344089"
        }
      ],
      "createdAt": "2025-10-31T02:25:09.152Z",
      "updatedAt": "2025-10-31T02:25:09.152Z",
      "relatedFiles": [
        {
          "path": "main.py",
          "type": "TO_MODIFY",
          "description": "更新主文件添加工具管理端点",
          "lineStart": 300,
          "lineEnd": 400
        },
        {
          "path": "start.py",
          "type": "TO_MODIFY",
          "description": "更新启动脚本支持工具配置",
          "lineStart": 30,
          "lineEnd": 60
        }
      ],
      "implementationGuide": "1. 添加/tools端点列出所有工具及其状态\n2. 添加/health端点进行全系统健康检查\n3. 改进/stats端点显示所有工具的统计信息\n4. 更新root端点显示工具列表和快速操作\n5. 添加单个工具的详细统计端点\n6. 更新启动脚本支持工具级配置",
      "verificationCriteria": "所有工具管理端点正常工作，健康检查准确，统计信息完整，启动配置支持工具级别设置"
    },
    {
      "id": "24e41874-4b4c-47a0-be99-6c20402bbf73",
      "name": "更新项目文档和测试",
      "description": "更新README.md、CLAUDE.md等文档，添加新工具的使用说明。同时添加基本的单元测试验证各工具功能。",
      "notes": "文档应包含：每个工具的功能说明、API使用示例、配置说明\n测试应覆盖：正常流程、边界条件、错误处理\n应提供工具使用视频教程（可选）",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "3ab138d8-49a7-4d34-bcf9-2fcebb2f8aa9"
        }
      ],
      "createdAt": "2025-10-31T02:25:09.152Z",
      "updatedAt": "2025-10-31T02:25:09.152Z",
      "relatedFiles": [
        {
          "path": "README.md",
          "type": "TO_MODIFY",
          "description": "更新用户文档",
          "lineStart": 1,
          "lineEnd": 100
        },
        {
          "path": "CLAUDE.md",
          "type": "TO_MODIFY",
          "description": "更新AI上下文文档",
          "lineStart": 1,
          "lineEnd": 100
        },
        {
          "path": "tests/",
          "type": "CREATE",
          "description": "测试目录",
          "lineStart": 1,
          "lineEnd": 50
        }
      ],
      "implementationGuide": "1. 更新README.md：介绍所有工具的使用方法\n2. 更新CLAUDE.md：反映新的工具架构\n3. 为每个工具编写单元测试（使用pytest）\n4. 添加集成测试：测试工具间协作\n5. 更新.gitignore忽略新生成的文件\n6. 编写API文档（使用FastAPI自动生成）",
      "verificationCriteria": "文档完整准确，测试覆盖主要功能，API文档自动生成，.gitignore更新完成"
    }
  ]
}